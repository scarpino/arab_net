IND2 <- rep(NA, nrow(exp))
IND2[use] <- "cold"
IND2[which(exp$ID %in% dry[,1])] <- "dry"
genes_n <- as.character(exp$ID[which(IND2 == "cold")])
test.i <- t.test(log(exp$Expression.Level) ~ IND2)
t_test_stats[n] <- test.i$statistic
layout(matrix(1:4,ncol=2))
for(i in c(2,5)){
dat.i <- dat.test[which(is.finite(log(dat.test[,i]))==TRUE),]
use <- which(dat.i[,1] %in% genes_n)
id <- rep('nonGE',nrow(dat.i))
id[use] <- 'GE'
dat.i <- log(dat.i[,i])
#dat.i <- dat.i[,i]
obs.i <- abs(mean(dat.i[use])-mean(dat.i[-use]))
len1 <- c()
for(j in 1:1000){
use.j <- sample(1:length(id), length(use), replace=TRUE)
met.j <- abs(mean(dat.i[use.j])-mean(dat.i[-use.j]))
len1 <- c(len1,met.j)
}
p.i <- round(length(which(len1>obs.i)),4)/j
if(i == 2){
pval_deg[n] <- p.i
non_ge_deg[n] <- exp(mean(dat.i[-use.j]))
ge_deg[n] <- exp(mean(dat.i[use.j]))
}
if(i == 5){
pval_eigen[n] <- p.i
non_ge_eigen[n] <- exp(mean(dat.i[-use.j]))
ge_eigen[n] <- exp(mean(dat.i[use.j]))
}
#boxplot(dat.i~id,main=paste0(colnames(dat.test)[i],' p value = ',p.i))
}
setTxtProgressBar(pb, n)
}
median(ge_deg)
median(non_ge_deg)
mean(non_ge_deg)
mean(ge_deg)
mean(pval_deg)
mean(pval_eigen)
mean(ge_eigen)
mean(log(ge_eigen))
mean(non_ge_eigen)
boxplot(log(ge_eigen)~log(non_ge_eigen), col = c("#b2182b","#f4a582"), yaxt = "n", ylab = "Degree", names = c(" ", " "), ylim = c(0,7), range = 0)
boxplot(log(ge_eigen)~log(non_ge_eigen), col = c("#b2182b","#f4a582")
)
boxplot(log(ge_eigen),log(non_ge_eigen), col = c("#b2182b","#f4a582")
)
non_ge_eigen
boxplot(log(ge_eigen),log(non_ge_eigen), col = c("#b2182b","#f4a582"), ylab = "Degree", names = c("eGxE", "non eGxE"), range = 0)
quartz(width = 5, height = 5)
quartz(width = 5, height = 5)
par(mar=c(2,4,1,0.2))
title(main = "Cold")
quartz(width = 5, height = 5)
par(mar=c(2,4,1,0.2))
layout(matrix(1:2, ncol = 1))
title(main = "Cold")
par(mar=c(2,4,1,0.2))
layout(matrix(1:2, ncol = 1))
boxplot(log(ge_eigen),log(non_ge_eigen), col = c("#b2182b","#f4a582"), ylab = "Degree", names = c("eGxE", "non eGxE"), range = 0)
title(main = "Cold")
quartz(width = 5, height = 5)
par(mar=c(2,4,1,0.2))
layout(matrix(1:2, ncol = 1))
boxplot(log(ge_deg),log(non_ge_deg), col = c("#2166ac","#92c5de"), ylab = "Degree (log)", names = c("eGxE", "non eGxE"), range = 0)
title(main = "Cold")
boxplot(log(ge_eigen),log(non_ge_eigen), col = c("#2166ac","#92c5de"), ylab = "Eigenvector centrality (log)", names = c("eGxE", "non eGxE"), range = 0)
exp(mean(dat.i[-use.j]))
summary(non_ge_eigen)
genes_n
rm <- which(!genes %in% genes_n)
rm
summary(non_ge_eigen)
dat.i <- dat.test[which(is.finite(log(dat.test[,i]))==TRUE),]
rm <- which(!genes %in% genes_n)
rm_out <- which(dat.i[,1] %in% rm)
dat.i <- dat.i[-rm, ]
use <- which(dat.i[,1] %in% genes_n)
id <- rep('nonGE',nrow(dat.i))
id[use] <- 'GE'
dat.i <- log(dat.i[,i])
#dat.i <- dat.i[,i]
obs.i <- abs(mean(dat.i[use])-mean(dat.i[-use]))
obs.i
rm(list=ls())
#libraries
library(igraph)
library(glmnet)
#data
exp <- read.csv("../data/Expression Level/Yang&Gaut Table_S1.csv")
cold <- read.csv("../data/HannahAllGxTCold.csv")
cold_0.1 <- read.csv("../data/FDR0.1/Cold GxE FDR0.1.csv")
dry <- read.csv("../data/DaveAllGxTDrought.csv")
dry_0.1 <- read.csv("../data/FDR0.1/Drought GxE FDR0.1.csv")
IND <- rep(NA, nrow(exp))
IND[which(exp$ID %in% cold$Probe_Set_ID)] <- "cold"
IND[which(exp$ID %in% dry[,1])] <- "dry"
boxplot(log(exp$Expression.Level) ~ IND)
t.test(log(exp$Expression.Level) ~ IND)
metric <- diff(by(exp$Expression.Level, IND, mean))
sim_mets <- c()
for(i in 1:1000){
IND.i <- rep(NA, nrow(exp))
IND.i[sample(1:nrow(exp), length(which(IND == "cold")))] <- "cold"
IND.i[sample(1:nrow(exp), length(which(IND == "dry")))] <- "dry"
metric.i <- diff(by(exp$Expression.Level, IND.i, mean))
sim_mets <- c(sim_mets, metric.i)
}
length(which(abs(sim_mets) > abs(metric)))/i
#testing for expression
dat.test<- read.csv("../data/gene_expression_net_feltus_main.csv")
genes <- as.character(exp$ID[which(IND == "cold")])
#logistic regression
rep_0 <- function(x){
x[which(x == 0)] <- NA
return(x)
}
dat.reg <- dat.test
dat.reg$expression <- exp$Expression.Level[match(dat.reg$gene, exp$ID)]
dat.reg <- dat.reg[,-1]
dat.reg <- apply(dat.reg, 2, rep_0)
dat.reg <- log(dat.reg)
GxE_ind <- rep(0, nrow(dat.reg))
GxE_ind[which(dat.test$gene %in% genes)] <- 1
m <- glm(GxE_ind~-1 + dat.reg)
summary(m)
#write.csv(summary(m)$coefficients, file = "expression_regression.csv")
#resampling
run_resample <- TRUE
if(run_resample == TRUE){
t_test_stats <- rep(NA, 1000)
pval_deg <- rep(NA, 1000)
pval_eigen <- rep(NA, 1000)
ge_deg <- rep(NA, 1000)
ge_eigen <- rep(NA, 1000)
non_ge_deg <- rep(NA, 1000)
non_ge_eigen <- rep(NA, 1000)
cold_exp <- exp$Expression.Level[which(IND == "cold")]
cold_prob <- 1/log(cold_exp)
cold_prob <- cold_prob/sum(cold_prob)
pb <- txtProgressBar(1, 1000, style=3)
for(n in 1:1000){
use <- sample(which(IND == "cold"), prob = cold_prob, size = 0.5*length(which(IND =="cold")), replace = FALSE)
IND2 <- rep(NA, nrow(exp))
IND2[use] <- "cold"
IND2[which(exp$ID %in% dry[,1])] <- "dry"
genes_n <- as.character(exp$ID[which(IND2 == "cold")])
test.i <- t.test(log(exp$Expression.Level) ~ IND2)
t_test_stats[n] <- test.i$statistic
layout(matrix(1:4,ncol=2))
for(i in c(2,5)){
dat.i <- dat.test[which(is.finite(log(dat.test[,i]))==TRUE),]
rm <- which(!genes %in% genes_n)
rm_out <- which(dat.i[,1] %in% rm)
dat.i <- dat.i[-rm, ]
use <- which(dat.i[,1] %in% genes_n)
id <- rep('nonGE',nrow(dat.i))
id[use] <- 'GE'
dat.i <- log(dat.i[,i])
#dat.i <- dat.i[,i]
obs.i <- abs(mean(dat.i[use])-mean(dat.i[-use]))
len1 <- c()
for(j in 1:1000){
use.j <- sample(1:length(id), length(use), replace=TRUE)
met.j <- abs(mean(dat.i[use.j])-mean(dat.i[-use.j]))
len1 <- c(len1,met.j)
}
p.i <- round(length(which(len1>obs.i)),4)/j
if(i == 2){
pval_deg[n] <- p.i
non_ge_deg[n] <- exp(mean(dat.i[-use.j]))
ge_deg[n] <- exp(mean(dat.i[use.j]))
}
if(i == 5){
pval_eigen[n] <- p.i
non_ge_eigen[n] <- exp(mean(dat.i[-use.j]))
ge_eigen[n] <- exp(mean(dat.i[use.j]))
}
#boxplot(dat.i~id,main=paste0(colnames(dat.test)[i],' p value = ',p.i))
}
setTxtProgressBar(pb, n)
}
quartz(width = 5, height = 5)
par(mar=c(2,4,1,0.2))
layout(matrix(1:2, ncol = 1))
boxplot(log(ge_deg),log(non_ge_deg), col = c("#2166ac","#92c5de"), ylab = "Degree (log)", names = c("eGxE", "non eGxE"), range = 0)
title(main = "Cold")
boxplot(log(ge_eigen),log(non_ge_eigen), col = c("#2166ac","#92c5de"), ylab = "Eigenvector centrality (log)", names = c("eGxE", "non eGxE"), range = 0)
}
mean(ge_deg)
mean(non_ge_deg)
mean(ge_eigen)
mean(non_ge_eigen)
mean(pval_deg)
mean(pval_eigen)
rm(list=ls())
library(igraph)
#global params
doALL<-TRUE
geneSet<- 'dry' #'cold'
#data
dat<-read.table('../data/Feltus_etal_AdditionalFile3_EdgeLists.txt', header=TRUE)
if(geneSet=='dry'){
genes<-read.csv('../data/DaveAllGxTDrought.csv')
}
if(geneSet=='cold'){
genes<-read.csv('../data/HannahAllGxTCold.csv')
}
genes <- as.character(genes[,1])
net_genes <- c(as.character(dat[,2]),as.character(dat[,3]))
net_genes <- unique(net_genes)
not_in <- 1-length(which(! as.character(genes) %in% net_genes))/nrow(genes)
#making arab main_screen == repeat_screen graph
dat.graph<-dat[which(dat[,1]=='GLOBAL'),2:3]
dat.graph[,1:2]<-apply(dat.graph[,1:2],2,as.character)
gr<-graph.data.frame(dat.graph,directed=FALSE)
deg<-degree(gr)
cl.gr<-clusters(gr)
bet<-betweenness(gr)
close<-closeness(gr)
eigen<-evcent(gr)
dat.out<-data.frame(names(bet),deg,bet,close,eigen$vector)
dat.out[,1]<-as.character(dat.out[,1])
colnames(dat.out)<-c('gene','degree','betweenness','closeness','eigenvector')
#write.csv(dat.out,file='geneExpressionNet.csv',row.names=FALSE)
null_set <- read.csv('../data/10_2011_freezing_ath1_AllAcc.csv')[,1]
null_set <-  unlist(strsplit(as.character(null_set), '_'))
null_set <- null_set[seq(1,length(null_set), by = 2)]
#stats
#dat.test<-dat.out[-which(dat.out$betweenness==0),]
dat.test<-dat.out
layout(matrix(1:4,ncol=2))
for(i in 2:ncol(dat.test)){
dat.i<-dat.test[which(is.finite(log(dat.test[,i]))==TRUE),]
use<-which(dat.i[,1] %in% genes)
id<-rep('nonGE',nrow(dat.i))
id[use]<-'GE'
null_set.i <- which(dat.i[,1] %in% null_set)
dat.i<-log(dat.i[,i])
obs.i<-abs(mean(dat.i[use])-mean(dat.i[-use]))
len1<-c()
for(j in 1:10000){
use.j<-sample(null_set.i,length(use),replace=TRUE)
met.j<-abs(mean(dat.i[use.j])-mean(dat.i[-use.j]))
len1<-c(len1,met.j)
}
p.i<-round(length(which(len1>obs.i)),4)/j
boxplot(dat.i~id,main=paste0(colnames(dat.test)[i],' p value = ',p.i))
#hist(len1,ain=paste0(colnames(dat.test)[i],' p value = ',p.i),col='gray')
#abline(v=obs.i,col='red',lty=3,lwd=3)
}
nets<-unique(dat[,1])
#setwd(paste0('allNets/', geneSet,'/'))
P<-matrix(NA,ncol=4,nrow=length(nets))
E<-matrix(NA,ncol=4,nrow=length(nets))
colnames(P)<-c('degree','betweenness','closeness','eigenvector')
colnames(E)<-c('degree','betweenness','closeness','eigenvector')
V_ge <- P
V_non_ge <- P
n_ge <- P
pb <- txtProgressBar(1, length(nets), style=3)
for(n in 1:length(nets)){
dat.graph<-dat[which(dat[,1]==nets[n]),2:3]
dat.graph[,1:2]<-apply(dat.graph[,1:2],2,as.character)
gr<-graph.data.frame(dat.graph,directed=FALSE)
deg<-degree(gr)
cl.gr<-clusters(gr)
bet<-betweenness(gr)
close<-closeness(gr)
eigen<-evcent(gr)
dat.out<-data.frame(names(bet),deg,bet,close,eigen$vector)
dat.out[,1]<-as.character(dat.out[,1])
colnames(dat.out)<-c('gene','degree','betweenness','closeness','eigenvector')
#write.csv(dat.out,file=paste0(nets[n],' geneExpressionNet.csv'),row.names=FALSE)
#stats
#dat.test<-dat.out[-which(dat.out$betweenness==0),]
#pdf(paste0(nets[n],'.pdf'))
#layout(matrix(1:4,ncol=2))
dat.test<-dat.out
for(i in 2:ncol(dat.test)){
dat.i<-dat.test[which(is.finite(log(dat.test[,i]))==TRUE),]
use<-which(dat.i[,1] %in% genes)
id<-rep('nonGE',nrow(dat.i))
id[use]<-'GE'
dat.i<-log(dat.i[,i])
obs.i<-abs(mean(dat.i[use])-mean(dat.i[-use]))
len1<-c()
do_iter <- TRUE
if(do_iter == TRUE){
for(j in 1:1000){
use.j<-sample(1:length(dat.i),length(use),replace=TRUE)
met.j<-abs(mean(dat.i[use.j])-mean(dat.i[-use.j]))
len1<-c(len1,met.j)
}
p.i<-round(length(which(len1>obs.i)),4)/j
boxplot(dat.i~id,main=paste0(colnames(dat.test)[i],' p value = ',p.i))
P[n,(i-1)]<-p.i
}
E[n,(i-1)]<-mean(dat.i[use])-mean(dat.i[-use])
V_ge[n,(i-1)] <- mean(dat.i[use])
V_non_ge[n,(i-1)] <- mean(dat.i[-use])
n_ge[n,(i-1)] <- length(use)
#hist(len1,ain=paste0(colnames(dat.test)[i],' p value = ',p.i),col='gray')
#abline(v=obs.i,col='red',lty=3,lwd=3)
}#end for i
setTxtProgressBar(pb, n)
#dev.off()
}#end for n
dat.out <- data.frame(as.character(nets),E, P, V_ge, V_non_ge, n_ge)
colnames(dat.out)[c(1,6:9)] <- c("Network", "degree_pval", "betweenness_pval", "closeness_pval", "eigenvector_pval")
#write.csv(dat.out,file=paste0(geneSet,'_GILS.csv'))
w <- n_ge[-1,"eigenvector"]/sum(n_ge[-1,"eigenvector"])
sum(V_ge[-1,"eigenvector"]*w)
w_gil <- table(dat$NETWORK)[-length(table(dat$NETWORK))]/sum(table(dat$NETWORK)[-length(table(dat$NETWORK))])
sum(V_non_ge[-1,"eigenvector"]*w_gil)
w <- n_ge[-1,"degree"]/sum(n_ge[-1,"degree"])
sum(V_ge[-1,"degree"]*w)
w_gil <- table(dat$NETWORK)[-length(table(dat$NETWORK))]/sum(table(dat$NETWORK)[-length(table(dat$NETWORK))])
sum(V_non_ge[-1,"degree"]*w_gil)
gils<-c(4, 6, 12, 18, 19, 29,40,46,47,51,55, 59,66,71,75,77,80,82,86) #stress gils
#gils.leaf = c(6,12,18,19,29, 40, 46,47,51,55,59,75,77,80,82,86)
gils<-paste0('GIL',gils)
use.e<-which(nets%in%gils)
#pdf('gilSummary.pdf')
layout(matrix(1:4,ncol=2))
for(e in 1:ncol(E)){
hist(E[use.e,e],breaks=10,main=paste0(colnames(P)[e],' prop sig = ',round(length(E[use.e,e][which(P[use.e,e]<0.05)])/length(E[use.e,e]),3)),col='#00000050',xlab='mean change GE - nonGE')
#hist(E[use.e,e][which(P[use.e,e]<0.05)],add=TRUE,col='#000000',breaks=10)
}#end for e
#dev.off()
head(dat.out)
geneSet
write.csv(dat.out[,1:9],file=paste0(geneSet,'_GILS.csv')
)
w <- n_ge[-1,"eigenvector"]/sum(n_ge[-1,"eigenvector"])
sum(V_ge[-1,"eigenvector"]*w)
w_gil <- table(dat$NETWORK)[-length(table(dat$NETWORK))]/sum(table(dat$NETWORK)[-length(table(dat$NETWORK))])
sum(V_non_ge[-1,"eigenvector"]*w_gil)
w <- n_ge[-1,"degree"]/sum(n_ge[-1,"degree"])
sum(V_ge[-1,"degree"]*w)
w_gil <- table(dat$NETWORK)[-length(table(dat$NETWORK))]/sum(table(dat$NETWORK)[-length(table(dat$NETWORK))])
sum(V_non_ge[-1,"degree"]*w_gil)
#libraries
library(igraph)
#global params
doALL<-TRUE
geneSet<- 'cold' #'dry'
#data
dat<-read.table('../data/Feltus_etal_AdditionalFile3_EdgeLists.txt', header=TRUE)
if(geneSet=='dry'){
genes<-read.csv('../data/DaveAllGxTDrought.csv')
}
if(geneSet=='cold'){
genes<-read.csv('../data/HannahAllGxTCold.csv')
}
genes <- as.character(genes[,1])
net_genes <- c(as.character(dat[,2]),as.character(dat[,3]))
net_genes <- unique(net_genes)
not_in <- 1-length(which(! as.character(genes) %in% net_genes))/nrow(genes)
#making arab main_screen == repeat_screen graph
dat.graph<-dat[which(dat[,1]=='GLOBAL'),2:3]
dat.graph[,1:2]<-apply(dat.graph[,1:2],2,as.character)
gr<-graph.data.frame(dat.graph,directed=FALSE)
deg<-degree(gr)
cl.gr<-clusters(gr)
bet<-betweenness(gr)
close<-closeness(gr)
eigen<-evcent(gr)
dat.out<-data.frame(names(bet),deg,bet,close,eigen$vector)
dat.out[,1]<-as.character(dat.out[,1])
colnames(dat.out)<-c('gene','degree','betweenness','closeness','eigenvector')
#write.csv(dat.out,file='geneExpressionNet.csv',row.names=FALSE)
null_set <- read.csv('../data/10_2011_freezing_ath1_AllAcc.csv')[,1]
null_set <-  unlist(strsplit(as.character(null_set), '_'))
null_set <- null_set[seq(1,length(null_set), by = 2)]
#stats
#dat.test<-dat.out[-which(dat.out$betweenness==0),]
dat.test<-dat.out
layout(matrix(1:4,ncol=2))
for(i in 2:ncol(dat.test)){
dat.i<-dat.test[which(is.finite(log(dat.test[,i]))==TRUE),]
use<-which(dat.i[,1] %in% genes)
id<-rep('nonGE',nrow(dat.i))
id[use]<-'GE'
null_set.i <- which(dat.i[,1] %in% null_set)
dat.i<-log(dat.i[,i])
obs.i<-abs(mean(dat.i[use])-mean(dat.i[-use]))
len1<-c()
for(j in 1:10000){
use.j<-sample(null_set.i,length(use),replace=TRUE)
met.j<-abs(mean(dat.i[use.j])-mean(dat.i[-use.j]))
len1<-c(len1,met.j)
}
p.i<-round(length(which(len1>obs.i)),4)/j
boxplot(dat.i~id,main=paste0(colnames(dat.test)[i],' p value = ',p.i))
#hist(len1,ain=paste0(colnames(dat.test)[i],' p value = ',p.i),col='gray')
#abline(v=obs.i,col='red',lty=3,lwd=3)
}
nets<-unique(dat[,1])
#setwd(paste0('allNets/', geneSet,'/'))
P<-matrix(NA,ncol=4,nrow=length(nets))
E<-matrix(NA,ncol=4,nrow=length(nets))
colnames(P)<-c('degree','betweenness','closeness','eigenvector')
colnames(E)<-c('degree','betweenness','closeness','eigenvector')
V_ge <- P
V_non_ge <- P
n_ge <- P
pb <- txtProgressBar(1, length(nets), style=3)
for(n in 1:length(nets)){
dat.graph<-dat[which(dat[,1]==nets[n]),2:3]
dat.graph[,1:2]<-apply(dat.graph[,1:2],2,as.character)
gr<-graph.data.frame(dat.graph,directed=FALSE)
deg<-degree(gr)
cl.gr<-clusters(gr)
bet<-betweenness(gr)
close<-closeness(gr)
eigen<-evcent(gr)
dat.out<-data.frame(names(bet),deg,bet,close,eigen$vector)
dat.out[,1]<-as.character(dat.out[,1])
colnames(dat.out)<-c('gene','degree','betweenness','closeness','eigenvector')
#write.csv(dat.out,file=paste0(nets[n],' geneExpressionNet.csv'),row.names=FALSE)
#stats
#dat.test<-dat.out[-which(dat.out$betweenness==0),]
#pdf(paste0(nets[n],'.pdf'))
#layout(matrix(1:4,ncol=2))
dat.test<-dat.out
for(i in 2:ncol(dat.test)){
dat.i<-dat.test[which(is.finite(log(dat.test[,i]))==TRUE),]
use<-which(dat.i[,1] %in% genes)
id<-rep('nonGE',nrow(dat.i))
id[use]<-'GE'
dat.i<-log(dat.i[,i])
obs.i<-abs(mean(dat.i[use])-mean(dat.i[-use]))
len1<-c()
do_iter <- TRUE
if(do_iter == TRUE){
for(j in 1:1000){
use.j<-sample(1:length(dat.i),length(use),replace=TRUE)
met.j<-abs(mean(dat.i[use.j])-mean(dat.i[-use.j]))
len1<-c(len1,met.j)
}
p.i<-round(length(which(len1>obs.i)),4)/j
boxplot(dat.i~id,main=paste0(colnames(dat.test)[i],' p value = ',p.i))
P[n,(i-1)]<-p.i
}
E[n,(i-1)]<-mean(dat.i[use])-mean(dat.i[-use])
V_ge[n,(i-1)] <- mean(dat.i[use])
V_non_ge[n,(i-1)] <- mean(dat.i[-use])
n_ge[n,(i-1)] <- length(use)
#hist(len1,ain=paste0(colnames(dat.test)[i],' p value = ',p.i),col='gray')
#abline(v=obs.i,col='red',lty=3,lwd=3)
}#end for i
setTxtProgressBar(pb, n)
#dev.off()
}#end for n
dat.out <- data.frame(as.character(nets),E, P, V_ge, V_non_ge, n_ge)
colnames(dat.out)[c(1,6:9)] <- c("Network", "degree_pval", "betweenness_pval", "closeness_pval", "eigenvector_pval")
#write.csv(dat.out[,1:9],file=paste0(geneSet,'_GILS.csv'))
w <- n_ge[-1,"eigenvector"]/sum(n_ge[-1,"eigenvector"])
sum(V_ge[-1,"eigenvector"]*w)
w_gil <- table(dat$NETWORK)[-length(table(dat$NETWORK))]/sum(table(dat$NETWORK)[-length(table(dat$NETWORK))])
sum(V_non_ge[-1,"eigenvector"]*w_gil)
w <- n_ge[-1,"degree"]/sum(n_ge[-1,"degree"])
sum(V_ge[-1,"degree"]*w)
w_gil <- table(dat$NETWORK)[-length(table(dat$NETWORK))]/sum(table(dat$NETWORK)[-length(table(dat$NETWORK))])
sum(V_non_ge[-1,"degree"]*w_gil)
gils<-c(4, 6, 12, 18, 19, 29,40,46,47,51,55, 59,66,71,75,77,80,82,86) #stress gils
#gils.leaf = c(6,12,18,19,29, 40, 46,47,51,55,59,75,77,80,82,86)
gils<-paste0('GIL',gils)
use.e<-which(nets%in%gils)
#pdf('gilSummary.pdf')
layout(matrix(1:4,ncol=2))
for(e in 1:ncol(E)){
hist(E[use.e,e],breaks=10,main=paste0(colnames(P)[e],' prop sig = ',round(length(E[use.e,e][which(P[use.e,e]<0.05)])/length(E[use.e,e]),3)),col='#00000050',xlab='mean change GE - nonGE')
#hist(E[use.e,e][which(P[use.e,e]<0.05)],add=TRUE,col='#000000',breaks=10)
}#end for e
#dev.off()
write.csv(dat.out[,1:9],file=paste0(geneSet,'_GILS.csv'))
w <- n_ge[-1,"eigenvector"]/sum(n_ge[-1,"eigenvector"])
sum(V_ge[-1,"eigenvector"]*w)
w_gil <- table(dat$NETWORK)[-length(table(dat$NETWORK))]/sum(table(dat$NETWORK)[-length(table(dat$NETWORK))])
sum(V_non_ge[-1,"eigenvector"]*w_gil)
w <- n_ge[-1,"degree"]/sum(n_ge[-1,"degree"])
sum(V_ge[-1,"degree"]*w)
w_gil <- table(dat$NETWORK)[-length(table(dat$NETWORK))]/sum(table(dat$NETWORK)[-length(table(dat$NETWORK))])
sum(V_non_ge[-1,"degree"]*w_gil)
head(dat.out)
colnames(V_non_ge)
head(V_non_ge)
mean(V_non_ge[-1,1])
mean(V_non_ge[-1,4])
mean(V_non_ge[-1,2:4])
colMeans(V_non_ge[-1,2:4])
summary(V_non_ge[,2])
length(which(V_non_ge[,2] < 4.464160))
length(which(V_non_ge[-1,2] < 4.464160))/nrow()
length(which(V_non_ge[-1,2] < 4.464160))
length(which(V_non_ge[-1,2] < V_non_ge[1,2]))
length(which(V_non_ge[-1,3] < V_non_ge[1,3]))
length(which(V_non_ge[-1,4] < V_non_ge[1,4]))
length(which(V_non_ge[-1,3] < V_non_ge[1,3]))/nrow(V_non_ge)
length(which(V_non_ge[-1,3] < V_non_ge[1,3]))/(nrow(V_non_ge)-1)
length(which(V_non_ge[-1,4] < V_non_ge[1,4]))/(nrow(V_non_ge)-1)
head(V_non_ge)
length(which(V_non_ge[-1,1] < V_non_ge[1,1]))/(nrow(V_non_ge)-1)
mean(V_non_ge[-1,1])
V_non_ge[1,] - colMeans(V_non_ge[-1,])
nrow(V_non_ge)
q()
